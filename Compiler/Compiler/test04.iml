program test(in const test1:int32, in const test2:int32,
	in const test3:bool, out const test4:int32)
global
    var globTest : int32;
    	proc testproc(in copy const t1:int32, in ref const t2:int32, in copy var t3:bool, in ref var t4:int32,
        inout copy const t11:int32, inout ref const t21:int32, inout copy var t31:bool, inout ref var t41:int32,
        out copy const t12:int32, out const t22:int32, out copy var t32:bool, out ref var t42:int32, 
        in copy a: array(2, 3, 2) int32, out copy b: array(2) int32,
        in copy c: array(10) int32, out copy d: array(4) int32)
    global
        var globTest, globalTest2
    local
        var locTest: int32
	do
		t42 init := 1;
        t42 := -5;
		a init := [  [[1,2],[3,4],[5,6]],  [[734223,8236],[281,11123],[674,878]]  ];
        c init := [1,2,3,4,5,6,7,8,9,0];
        t31 init := not true;
        b init := fill -4;
        b := a[0][1];
        d := c[1..4];
        if ( t1 = t2 && t2 < t3 && t3 > t4 || t11 /= t41 div t31 div t21 div t11 &? t31 <= t41 * t11 |? t1 - t2 >=t4 + t3 ) then
            t11 := t22 + t32
        else
            t11 := t12 + t31
        endif
	endproc;
	var ipown:int32; //pow(i, years)
    var captialur:int32; //Unrounded capital
    fun testfun(in copy const t1:int32, in ref const t2:int32, in copy var t3:bool, in ref var t4:int32,
        inout copy const t11:int32, inout ref const t21:int32, inout copy var t31:bool, inout ref var t41:int32,
        out copy const t12:int32, out ref const t22:int32, out var t32:bool, out ref var t42:int32) returns const y:int32
    global
        a,b,c
    local
        var loctest2 : int32;
        var locTest3 : int32
	do
        t42 init := 1;
		
        if ( t2 < t3 || t1 < t2 || t2 < t3 && t4 > t5 && t1 < t4 || t4 < t2 ) then
        //if t1 + t2 < t3 - t4 then
            t11 := t22 + t32
        else
            t11 := t12 + t31
        endif;

        while t3 > t4 do
            t3 := t4 - 1
        endwhile;

        y := t11
	endfun
do
	//Calculate interest
	call pow(1 + interest, years, ipown init) init a,b,c,d;
	captialur := capital0 * ipown;
	//Round to 5 centime (Rappen)
	capitaln init := captialur * 20 div 20 div 1 div 4;
    capital := 1 + 2 + 3 - 4 - 5;
    if ( (a < b) = (b > c) && b < c && c < d ) then
        capital := 4 * 3 * 4 + 2 * 3 + 4 - 1 * 2
    else
        skip
    endif
endprogram
