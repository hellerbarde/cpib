using System;
using System.Collections;
using System.Collections.Generic;

namespace Compiler
{
  public class Parser
  {
    private IList<Token> TokenList { get; set; }

    private IEnumerator<Token> tokens;
    private Token token;
    private Terminals terminal;

    public Parser(IList<Token> tl)
    {
      TokenList = tl;
      tokens = TokenList.GetEnumerator();
      tokens.Reset();
      tokens.MoveNext();
      token = tokens.Current;
      terminal = token.Terminal;
    }

    private Token consume(Terminals expectedTerminal)
    {
      if (terminal == expectedTerminal) {
        Token consumedToken = token;
        if (terminal != Terminals.SENTINEL) {
          tokens.MoveNext();
          token = tokens.Current;
          // maintain class invariant
          terminal = token.Terminal;
        }
        return consumedToken;
      }
      else {
        throw new GrammarError("terminal expected: " + expectedTerminal +
          ", terminal found: " + terminal);
      }
    }

    {% for token in list_of_nts %}
    public I{{ token.name }} parse{{ token.name }}()
    {
      switch (terminal) {
        {% for entry in token.columns %}
        case Terminals.{{ column.name | upper }}:
        {
          var {{ token.name | lower }} = new {{ token.name }}{{ column.name | capitalize }};
          {{ make_parse_code(entry) }}
          return {{ token.name | lower }};
        }
        {% endfor %}
        default:
          throw new NotImplementedException();
      }
    }
    {% endfor %}

    private class GrammarError : Exception
    {
      public GrammarError(String ErrorMessage) :base (ErrorMessage)
      {

      }
    }
  }
}

program.Ident = consume(Terminals.IDENT);
program.ProgParamList = parseProgParamList();

{% macro make_parse_code(entry) -%}
    {% for token in entry %}
        {% if token.type == "Nonterminal" %}
            program.{{ token.name }} = parse{{ token.name }}();
        {% elif token.type == "Terminal %}
            program.Ident = consume(Terminals.IDENT);
        {% else %}
            throw new NotImplementedException();
        {% endif %}
    {% endfor %}
{%- endmacro %}

{% macro input(name, value='', type='text', size=20) -%}
    <input type="{{ type }}" name="{{ name }}" value="{{
        value|e }}" size="{{ size }}">
{%- endmacro %}
