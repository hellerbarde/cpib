
{%- macro make_parse_code(entry) -%}
    {%- for token in entry %}
        {%- if token.type == "Nonterminal" %}
          program.{{ token.name | lower}} = parse{{ token.name }}();
        {% elif token.type == "Terminal" %}
          program.{{ token.name | upper}} = consume(Terminals.{{ token.name | upper}});
        {% else %}
          // Epsilon
        {% endif -%}
    {% endfor -%}
{%- endmacro -%}

using System;
using System.Collections;
using System.Collections.Generic;

namespace Compiler
{
  public class Parser
  {
    private IList<Token> TokenList { get; set; }

    private IEnumerator<Token> tokens;
    private Token token;
    private Terminals terminal;

    public Parser(IList<Token> tl)
    {
      TokenList = tl;
      tokens = TokenList.GetEnumerator();
      tokens.Reset();
      tokens.MoveNext();
      token = tokens.Current;
      terminal = token.Terminal;
    }

    private Token consume(Terminals expectedTerminal)
    {
      if (terminal == expectedTerminal) {
        Token consumedToken = token;
        if (terminal != Terminals.SENTINEL) {
          tokens.MoveNext();
          token = tokens.Current;
          // maintain class invariant
          terminal = token.Terminal;
        }
        return consumedToken;
      }
      else {
        throw new GrammarError("terminal expected: " + expectedTerminal +
          ", terminal found: " + terminal);
      }
    }

    {% for token in list_of_nts %}
    public I{{ token.name | capitalizefirstchar }} parse{{ token.name }}()
    {
      switch (terminal) {
        {%- for entry in token.columns %}
        case Terminals.{{ entry.name | upper }}:
        {
          var {{ token.name | lower }} = new {{ token.name | capitalizefirstchar }}{{ entry.name | capitalize }}();
    {% for tok in entry.entry %}
        {%- if tok.type == "Nonterminal" %}
          {{ token.name | lower }}.{{ tok.name | lower}} = parse{{ tok.tokentype }}();
        {% elif tok.type == "Terminal" %}
          {{ token.name | lower }}.{{ tok.name | upper}} = consume(Terminals.{{ tok.name | upper}});
        {% else %}
          // Epsilon
        {% endif -%}
    {% endfor %}
          return {{ token.name | lower }};
        }
        {% endfor -%}
        default:
          throw new NotImplementedException();
      }
    }
    {% endfor %}

    private class GrammarError : Exception
    {
      public GrammarError(String ErrorMessage) :base (ErrorMessage)
      {

      }
    }
  }
}
